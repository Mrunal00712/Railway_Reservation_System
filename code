import java.util.*;

class Train {
    private String name;
    private String time;
    private int passengerStrength;
    private int trainNumber;

    public Train(String name, String time, int passengerStrength, int trainNumber) {
        this.name = name;
        this.time = time;
        this.passengerStrength = passengerStrength;
        this.trainNumber = trainNumber;
    }

    public String getName() {
        return name;
    }

    public String getTime() {
        return time;
    }

    public int getPassengerStrength() {
        return passengerStrength;
    }

    public int getTrainNumber() {
        return trainNumber;
    }
}

class TrainReservationSystem {
    private List<Train> availableTrains = new ArrayList<>();
    private Map<Integer, List<String>> bookedTickets = new HashMap<>();

    public TrainReservationSystem() {
        // Initialize available trains
        availableTrains.add(new Train("Mumbai - Delhi", "13:05", 50, 1010));
        availableTrains.add(new Train("Delhi - Jaipur", "7:00", 50, 2013));
        availableTrains.add(new Train("Prayagraj - Delhi", "10:00", 50, 3045));
    }

    public void displayAvailableTrains() {
        System.out.println("Available Trains:");
        System.out.println("Train Number\tTrain Name\tTime\tPassenger Strength");
        for (Train train : availableTrains) {
            System.out.println(train.getTrainNumber() + "\t\t" + train.getName() + "\t" + train.getTime() + "\t" + train.getPassengerStrength());
        }
    }

    public void checkSeatAvailability(int trainNumber) {
        for (Train train : availableTrains) {
            if (train.getTrainNumber() == trainNumber) {
                int availableSeats = train.getPassengerStrength() - getBookedSeatsCount(trainNumber);
                System.out.println("Available seats on train " + trainNumber + ": " + availableSeats);
                return;
            }
        }
        System.out.println("Invalid train number.");
    }

    public void bookSeat(int trainNumber, List<String> passengerNames) {
        for (Train train : availableTrains) {
            if (train.getTrainNumber() == trainNumber) {
                int availableSeats = train.getPassengerStrength() - getBookedSeatsCount(trainNumber);
                if (passengerNames.size() <= availableSeats) {
                    bookedTickets.put(trainNumber, passengerNames);
                    System.out.println("Booking successful!");
                } else {
                    System.out.println("Not enough available seats for booking.");
                }
                return;
            }
        }
        System.out.println("Invalid train number.");
    }

    public void cancelTicket(int trainNumber) {
        if (bookedTickets.containsKey(trainNumber)) {
            bookedTickets.remove(trainNumber);
            System.out.println("Ticket canceled successfully.");
        } else {
            System.out.println("Invalid train number or no ticket booked for this train.");
        }
    }

    public void displayTicketDetails(int trainNumber) {
        if (bookedTickets.containsKey(trainNumber)) {
            System.out.println("Ticket Details for Train " + trainNumber + ":");
            List<String> passengerNames = bookedTickets.get(trainNumber);
            for (int i = 0; i < passengerNames.size(); i++) {
                System.out.println("Passenger " + (i + 1) + ": " + passengerNames.get(i));
            }
        } else {
            System.out.println("Invalid train number or no ticket booked for this train.");
        }
    }

    private int getBookedSeatsCount(int trainNumber) {
        if (bookedTickets.containsKey(trainNumber)) {
            return bookedTickets.get(trainNumber).size();
        } else {
            return 0;
        }
    }

    public static void main(String[] args) {
        TrainReservationSystem reservationSystem = new TrainReservationSystem();
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Display Available Trains");
            System.out.println("2. Check Seat Availability");
            System.out.println("3. Book a Seat");
            System.out.println("4. Cancel Ticket");
            System.out.println("5. Display Ticket Details");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume the newline character

            switch (choice) {
                case 1:
                    reservationSystem.displayAvailableTrains();
                    break;
                case 2:
                    System.out.print("Enter the train number: ");
                    int trainNumber1 = scanner.nextInt();
                    reservationSystem.checkSeatAvailability(trainNumber1);
                    break;
                case 3:
                    System.out.print("Enter the train number: ");
                    int trainNumber2 = scanner.nextInt();
                    scanner.nextLine(); // Consume the newline character
                    System.out.print("Enter passenger names (comma-separated): ");
                    String[] passengerNames = scanner.nextLine().split(",");
                    List<String> passengerList = Arrays.asList(passengerNames);
                    reservationSystem.bookSeat(trainNumber2, passengerList);
                    break;
                case 4:
                    System.out.print("Enter the train number: ");
                    int trainNumber3 = scanner.nextInt();
                    reservationSystem.cancelTicket(trainNumber3);
                    break;
                case 5:
                    System.out.print("Enter the train number: ");
                    int trainNumber4 = scanner.nextInt();
                    reservationSystem.displayTicketDetails(trainNumber4);
                    break;
                case 6:
                    System.out.println("Exiting the system. Thank you!");
                    scanner.close();
                    System.exit(0);
                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}
